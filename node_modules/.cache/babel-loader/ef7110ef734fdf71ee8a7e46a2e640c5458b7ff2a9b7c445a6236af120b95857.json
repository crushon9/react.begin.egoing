{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react-app\\\\src\\\\App.js\";\nimport { Component } from \"react\"; // react 라는 라이브러리에서 Component라는 클래스를 로딩\nimport ToC from \"./components/ToC\"; // ToC 라는 태그를 root폴더(src) 하위의 components 하위의 ToC.js 파일에서 가져온다\nimport Subject from \"./components/Subject\";\nimport Control from \"./components/Control\";\nimport ReadContent from \"./components/ReadContent\";\nimport CreateContent from \"./components/CreateContent\";\nimport UpdateContent from \"./components/UpdateContent\";\nimport './App.css';\n\n// jsx : JavaScript를 확장한 문법 (html 태그를 따옴표로 표현하지 않아도 됨)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    // 컴포넌트를 render 하기 전에 실행되는 생성자 초기한번실행되며 그뒤론 컴포넌트의 this안에 저장됨\n    super(props); // 모든 state 초기화\n    this.state = {\n      // state 값 설정\n      subject: {\n        title: 'React',\n        sub: '페이스북에서 개발한 자바스크립트 라이브러리'\n      },\n      welcome: {\n        title: 'Welcome',\n        desc: 'Hello, React!!'\n      },\n      contents: [{\n        id: 1,\n        title: 'intro',\n        desc: 'react 특징 컴포넌트 기반',\n        li: ['가독성', '재사용성', '유지보수']\n      }, {\n        id: 2,\n        title: 'install',\n        desc: 'npm/npx 을 이용하여 create-react-app 설치',\n        li: ['npm - nodejs 프로그램 (영구설치)', 'npx - 임시로 설치해서 삭제하고 사용할때마다 다시 다운하여 늘 최신상태 유지']\n      }, {\n        id: 3,\n        title: 'coding & run',\n        desc: '수정한 코드는 실시간 반영',\n        li: ['init : cmd에서 create-react-app 실행하면 실행위치 폴더에 자동 세팅', 'coding : src폴더의 하위파일 코드편집', 'run : npm run start']\n      }, {\n        id: 4,\n        title: 'deploy',\n        desc: '원본을 그대로 배포하면 파일용량이 크고 보안문제가 있음',\n        li: ['​npm run build 명령 : build 폴더 안에 용량이 줄어든 코드파일 자동생성', 'npm install -g serve : 서브설치 (npm을 통해 설치가능한 간단한 웹서버)', 'serve -s build : 서브를 실행시킬때 build 디렉토리를 루트로 하겠다']\n      }],\n      mode: 'welcome',\n      // default 값\n      selected_cnt_id: 0 // default 값\n    };\n\n    this.max_content_id = this.state.contents[this.state.contents.length - 1].id;\n    // 초기한번만 실행되기때문에 배열의 길이가 실시간으로 반영되어 변하지 않음, ui에 영향주는 변수가 아니므로 state 바깥에서 제어\n  }\n\n  getSelectedContent() {\n    for (var i = 0; i < this.state.contents.length; i++) {\n      var content = this.state.contents[i];\n      if (content.id === this.state.selected_cnt_id) {\n        return content;\n      }\n    }\n  }\n  getArticle() {\n    var article = null;\n    if (this.state.mode === 'welcome') {\n      article = /*#__PURE__*/_jsxDEV(ReadContent, {\n        title: this.state.welcome.title,\n        desc: this.state.welcome.desc,\n        li: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.mode === 'read') {\n      article = /*#__PURE__*/_jsxDEV(ReadContent, {\n        title: this.getSelectedContent().title,\n        desc: this.getSelectedContent().desc,\n        li: this.getSelectedContent().li\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.mode === 'create') {\n      article = /*#__PURE__*/_jsxDEV(CreateContent, {\n        onSubmit: function (title, desc) {\n          this.max_content_id = this.max_content_id + 1;\n          /** push는 원본데이터를 변경함 state 원본데이터를 직접변경하는것은 지양해야한다\n           * 왜?? 원본을 변경하면 shouldComponentUpdate에서 state데이터와 nextProps로받은 데이터를 구분할 수가 없음\n           * 왜냐면 내 생각엔\n           * 컴포넌트안에 props는 변수처럼 실제값을 들고있는게 아니라 참조만하고있음\n           * render()안에서 props가 업데이트 됨 즉 주소값이 바뀜\n           * 그 전에 호출되는 shouldComponentUpdate안에서는 this.props는 기존데이터를 참조하고 있는 상태임\n           * 그러나 기존참조의 원본데이터를 변경하면 shouldComponentUpdate안에서 기존참조와 받은참조가 주소가같고 값도 같음\n           this.state.contents.push(\n           {id:this.max_content_id, title:title, desc:desc}\n           );\n           this.setState({contents:this.state.contents});\n           this.setState({mode:'read'}); contents를 변경하고 엉뚱한 state를 set하여서 렌더링만 호출하여도 정상동작함\n           */\n\n          /** concat은 원본데이터를 변경하지 않으며 return으로 덧붙여진 결과 복제하여 뱉음 (immutable)\n           var newContents = this.state.contents.concat(\n           {id:this.max_content_id, title:title, desc:desc}\n           );\n           */\n\n          var newContents = Array.from(this.state.contents); // Array.from(배열) :배열복사해서 return  // Object.assign({},객체) 앞의 객체에 뒤의 객체를 덧붙여서 return\n          newContents.push({\n            id: this.max_content_id,\n            title: title,\n            desc: desc,\n            li: null\n          });\n          this.setState({\n            contents: newContents,\n            mode: 'read',\n            selected_cnt_id: this.max_content_id\n          });\n        }.bind(this),\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.mode === 'update') {\n      if (this.getSelectedContent() !== undefined) {\n        article = /*#__PURE__*/_jsxDEV(UpdateContent, {\n          data: this.getSelectedContent(),\n          onSubmit: function (_id, _title, _desc) {\n            var _contents = Array.from(this.state.contents);\n            for (var i = 0; i < _contents.length; i++) {\n              if (_contents[i].id === _id) {\n                _contents[i] = {\n                  id: _id,\n                  title: _title,\n                  desc: _desc,\n                  li: null\n                };\n                break;\n              }\n            }\n            this.setState({\n              contents: _contents,\n              mode: 'read'\n            });\n          }.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 27\n        }, this);\n      } else {\n        article = /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"artcle\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 27\n        }, this);\n      }\n    }\n    return article;\n  }\n  /** [props & state]\n   * props 와 state 는 일반 JavaScript 객체입니다. props는 컴포넌트 함수에 전달되는 유일한 인자이다. state는 (함수 내에 선언된 변수처럼) 컴포넌트 안에서 관리됩니다.\n   * props 컴포넌트에 설정값을 태그호출시 외부에서 props={ } 형태로 주입, read-only 내부에서 수정불가\n   * state 컴포넌트에 설정값을 내부 코드에서 조작, constructor()로 미리 값을 세팅하거나, setState를 통해 동적으로 값 변경\n   * 상위(부모) 컴포넌트가 하위(자식) 컴포넌트를 제어할 때 상위 state값을 하위 props로 주입하여 제어\n   * 하위(자식) 컴포넌트가 상위(부모) 컴포넌트를 제어할 때 부모가 함수로 setState 선언 자식은 이벤트를통해얻은 인자를 props로 선언된 부모함수의 파라미터로 전달 */\n  render() {\n    /** render() (class 안에 소속된 함수는 function을 생략해서 표현)\n     * 리액트에서는 props, state가 바뀌면 해당되는 컴포넌트의 render함수가 호출되며 화면이 다시 그려진다 */\n    console.log('**App render**');\n    return (\n      /*#__PURE__*/\n      // return 안에는 하나의 최상위 html 태그를 정의해야한다\n      _jsxDEV(\"div\", {\n        className: \"App_css\",\n        children: [/*#__PURE__*/_jsxDEV(Subject, {\n          title: this.state.subject.title // 하위(자식) 컴포넌트의 props에 상위(부모) 컴포넌트의 state값을 주입\n          ,\n          sub: this.state.subject.sub,\n          onChangePage: function () {\n            // props로 함수를 정의할수도 있음\n            this.setState({\n              // setState: state를 변경하며 render호출 그냥 변경하면 render가 호출되지 않음\n              mode: 'welcome',\n              selected_cnt_id: 0\n            });\n          }.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ToC, {\n          data: this.state.contents,\n          onChangePage: function (id) {\n            this.setState({\n              mode: 'read',\n              selected_cnt_id: Number(id)\n            });\n          }.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Control, {\n          onChangeMode: function (mode) {\n            if (mode == 'delete') {\n              if (this.state.selected_cnt_id !== 0 && window.confirm('really??')) {\n                var _contents = Array.from(this.state.contents);\n                for (var i = 0; i < _contents.length; i++) {\n                  if (_contents[i].id === this.state.selected_cnt_id) {\n                    _contents.splice(i, 1);\n                    break;\n                  }\n                }\n                this.setState({\n                  mode: 'welcome',\n                  contents: _contents,\n                  selected_cnt_id: 0\n                });\n              }\n            } else if (mode === 'create') {\n              this.setState({\n                mode: mode,\n                selected_cnt_id: 0\n              });\n            } else {\n              this.setState({\n                mode: mode\n              });\n            }\n          }.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this), this.getArticle(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)\n    );\n  }\n}\nexport default App;","map":{"version":3,"names":["Component","ToC","Subject","Control","ReadContent","CreateContent","UpdateContent","jsxDEV","_jsxDEV","App","constructor","props","state","subject","title","sub","welcome","desc","contents","id","li","mode","selected_cnt_id","max_content_id","length","getSelectedContent","i","content","getArticle","article","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","newContents","Array","from","push","setState","bind","children","undefined","data","_id","_title","_desc","_contents","render","console","log","className","onChangePage","Number","onChangeMode","window","confirm","splice"],"sources":["C:/workspace/react-app/src/App.js"],"sourcesContent":["import {Component} from \"react\"; // react 라는 라이브러리에서 Component라는 클래스를 로딩\nimport ToC from \"./components/ToC\" // ToC 라는 태그를 root폴더(src) 하위의 components 하위의 ToC.js 파일에서 가져온다\nimport Subject from \"./components/Subject\"\nimport Control from \"./components/Control\"\nimport ReadContent from \"./components/ReadContent\"\nimport CreateContent from \"./components/CreateContent\";\nimport UpdateContent from \"./components/UpdateContent\";\nimport './App.css';\n\n// jsx : JavaScript를 확장한 문법 (html 태그를 따옴표로 표현하지 않아도 됨)\nclass App extends Component {\n    constructor(props){ // 컴포넌트를 render 하기 전에 실행되는 생성자 초기한번실행되며 그뒤론 컴포넌트의 this안에 저장됨\n        super(props); // 모든 state 초기화\n        this.state = { // state 값 설정\n            subject:{title:'React', sub:'페이스북에서 개발한 자바스크립트 라이브러리'},\n            welcome:{title:'Welcome', desc:'Hello, React!!'},\n            contents:[{id:1,title:'intro' ,desc: 'react 특징 컴포넌트 기반',\n                        li:['가독성', '재사용성', '유지보수']},\n                    {id:2,title:'install' ,desc:'npm/npx 을 이용하여 create-react-app 설치',\n                        li:['npm - nodejs 프로그램 (영구설치)', 'npx - 임시로 설치해서 삭제하고 사용할때마다 다시 다운하여 늘 최신상태 유지']},\n                    {id:3,title:'coding & run' ,desc:'수정한 코드는 실시간 반영',\n                        li:['init : cmd에서 create-react-app 실행하면 실행위치 폴더에 자동 세팅','coding : src폴더의 하위파일 코드편집','run : npm run start']},\n                    {id:4,title:'deploy' ,desc:'원본을 그대로 배포하면 파일용량이 크고 보안문제가 있음',\n                        li:['​npm run build 명령 : build 폴더 안에 용량이 줄어든 코드파일 자동생성','npm install -g serve : 서브설치 (npm을 통해 설치가능한 간단한 웹서버)','serve -s build : 서브를 실행시킬때 build 디렉토리를 루트로 하겠다']},\n            ],\n            mode:'welcome', // default 값\n            selected_cnt_id:0, // default 값\n        }\n        this.max_content_id = this.state.contents[this.state.contents.length-1].id;\n        // 초기한번만 실행되기때문에 배열의 길이가 실시간으로 반영되어 변하지 않음, ui에 영향주는 변수가 아니므로 state 바깥에서 제어\n    }\n    getSelectedContent() {\n        for(var i = 0; i < this.state.contents.length; i++){\n            var content = this.state.contents[i];\n            if (content.id === this.state.selected_cnt_id) {\n                return content;\n            }\n        }\n    }\n    getArticle() {\n        var article = null;\n        if (this.state.mode === 'welcome') {\n            article = <ReadContent title={this.state.welcome.title} desc={this.state.welcome.desc} li={null}></ReadContent>;\n        } else if (this.state.mode === 'read') {\n            article = <ReadContent title={this.getSelectedContent().title} desc={this.getSelectedContent().desc} li={this.getSelectedContent().li}></ReadContent>\n        } else if (this.state.mode === 'create') {\n            article = <CreateContent onSubmit={function (title,desc) {\n                this.max_content_id = this.max_content_id+1;\n                /** push는 원본데이터를 변경함 state 원본데이터를 직접변경하는것은 지양해야한다\n                 * 왜?? 원본을 변경하면 shouldComponentUpdate에서 state데이터와 nextProps로받은 데이터를 구분할 수가 없음\n                 * 왜냐면 내 생각엔\n                 * 컴포넌트안에 props는 변수처럼 실제값을 들고있는게 아니라 참조만하고있음\n                 * render()안에서 props가 업데이트 됨 즉 주소값이 바뀜\n                 * 그 전에 호출되는 shouldComponentUpdate안에서는 this.props는 기존데이터를 참조하고 있는 상태임\n                 * 그러나 기존참조의 원본데이터를 변경하면 shouldComponentUpdate안에서 기존참조와 받은참조가 주소가같고 값도 같음\n                 this.state.contents.push(\n                 {id:this.max_content_id, title:title, desc:desc}\n                 );\n                 this.setState({contents:this.state.contents});\n                 this.setState({mode:'read'}); contents를 변경하고 엉뚱한 state를 set하여서 렌더링만 호출하여도 정상동작함\n                 */\n\n                /** concat은 원본데이터를 변경하지 않으며 return으로 덧붙여진 결과 복제하여 뱉음 (immutable)\n                 var newContents = this.state.contents.concat(\n                 {id:this.max_content_id, title:title, desc:desc}\n                 );\n                 */\n\n                var newContents = Array.from(this.state.contents); // Array.from(배열) :배열복사해서 return  // Object.assign({},객체) 앞의 객체에 뒤의 객체를 덧붙여서 return\n                newContents.push({id:this.max_content_id, title:title, desc:desc, li: null});\n                this.setState({\n                    contents: newContents,\n                    mode: 'read',\n                    selected_cnt_id: this.max_content_id\n                });\n            }.bind(this)}> {/* this :App */}\n            </CreateContent>\n        } else if (this.state.mode === 'update') {\n            if (this.getSelectedContent() !== undefined) {\n                article = <UpdateContent data={this.getSelectedContent()}\n                                          onSubmit={function (_id,_title,_desc) {\n                                              var _contents = Array.from(this.state.contents);\n                                              for (var i = 0; i < _contents.length; i++){\n                                                  if (_contents[i].id === _id) {\n                                                      _contents[i] = {id: _id, title: _title, desc: _desc, li: null};\n                                                      break;\n                                                  }\n                                              }\n                                              this.setState({contents: _contents, mode: 'read'});\n                                          }.bind(this)}>\n                </UpdateContent>\n            } else {\n                article = <h3>artcle을 선택해주세요</h3>;\n            }\n        }\n        return article\n    }\n    /** [props & state]\n     * props 와 state 는 일반 JavaScript 객체입니다. props는 컴포넌트 함수에 전달되는 유일한 인자이다. state는 (함수 내에 선언된 변수처럼) 컴포넌트 안에서 관리됩니다.\n     * props 컴포넌트에 설정값을 태그호출시 외부에서 props={ } 형태로 주입, read-only 내부에서 수정불가\n     * state 컴포넌트에 설정값을 내부 코드에서 조작, constructor()로 미리 값을 세팅하거나, setState를 통해 동적으로 값 변경\n     * 상위(부모) 컴포넌트가 하위(자식) 컴포넌트를 제어할 때 상위 state값을 하위 props로 주입하여 제어\n     * 하위(자식) 컴포넌트가 상위(부모) 컴포넌트를 제어할 때 부모가 함수로 setState 선언 자식은 이벤트를통해얻은 인자를 props로 선언된 부모함수의 파라미터로 전달 */\n    render() {\n        /** render() (class 안에 소속된 함수는 function을 생략해서 표현)\n         * 리액트에서는 props, state가 바뀌면 해당되는 컴포넌트의 render함수가 호출되며 화면이 다시 그려진다 */\n        console.log('**App render**');\n        return ( // return 안에는 하나의 최상위 html 태그를 정의해야한다\n            <div className=\"App_css\">\n               {/** <Subject title=\"React\" sub=\"페이스북에서 개발한 자바스크립트 라이브러리\"></Subject> props 값을 하드코딩할수도 있음 */}\n                <Subject\n                    title={this.state.subject.title} // 하위(자식) 컴포넌트의 props에 상위(부모) 컴포넌트의 state값을 주입\n                    sub={this.state.subject.sub}\n                    onChangePage={function () { // props로 함수를 정의할수도 있음\n                        this.setState({ // setState: state를 변경하며 render호출 그냥 변경하면 render가 호출되지 않음\n                            mode:'welcome',\n                            selected_cnt_id:0\n                        });\n                    }.bind(this)}\n                >\n                </Subject>\n                <ToC\n                    data={this.state.contents}\n                    onChangePage={function (id) {\n                        this.setState({\n                            mode:'read',\n                            selected_cnt_id:Number(id),\n                        });\n                    }.bind(this)}\n                >\n                </ToC>\n                <Control\n                    onChangeMode={function (mode) {\n                        if (mode == 'delete') {\n                            if(this.state.selected_cnt_id !== 0 && window.confirm('really??')) {\n                                var _contents = Array.from(this.state.contents);\n                                for (var i = 0; i < _contents.length; i++){\n                                    if (_contents[i].id === this.state.selected_cnt_id) {\n                                        _contents.splice(i,1);\n                                        break;\n                                    }\n                                }\n                                this.setState({\n                                    mode:'welcome',\n                                    contents:_contents,\n                                    selected_cnt_id:0\n                                });\n                            }\n                        } else if (mode === 'create') {\n                            this.setState({\n                                mode:mode,\n                                selected_cnt_id:0\n                            });\n                        } else {\n                            this.setState({\n                                mode:mode\n                            });\n                        }\n                    }.bind(this)}\n                >\n                </Control>\n                {this.getArticle()} {/* 컴포넌트를 변수로 제어해서 뿌리기*/}\n            </div>\n        );\n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}